// Code generated by Kitex v0.3.1. DO NOT EDIT.

package videoservice

import (
	"context"
	"github.com/yulezhang/douyin/kitex_gen/video"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"DouyinFeed":          kitex.NewMethodInfo(douyinFeedHandler, newVideoServiceDouyinFeedArgs, newVideoServiceDouyinFeedResult, false),
		"DouyinPublishAction": kitex.NewMethodInfo(douyinPublishActionHandler, newVideoServiceDouyinPublishActionArgs, newVideoServiceDouyinPublishActionResult, false),
		"DouyinPublishList":   kitex.NewMethodInfo(douyinPublishListHandler, newVideoServiceDouyinPublishListArgs, newVideoServiceDouyinPublishListResult, false),
		"DouyinFavoriteList":  kitex.NewMethodInfo(douyinFavoriteListHandler, newVideoServiceDouyinFavoriteListArgs, newVideoServiceDouyinFavoriteListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func douyinFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceDouyinFeedArgs)
	realResult := result.(*video.VideoServiceDouyinFeedResult)
	success, err := handler.(video.VideoService).DouyinFeed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceDouyinFeedArgs() interface{} {
	return video.NewVideoServiceDouyinFeedArgs()
}

func newVideoServiceDouyinFeedResult() interface{} {
	return video.NewVideoServiceDouyinFeedResult()
}

func douyinPublishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceDouyinPublishActionArgs)
	realResult := result.(*video.VideoServiceDouyinPublishActionResult)
	success, err := handler.(video.VideoService).DouyinPublishAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceDouyinPublishActionArgs() interface{} {
	return video.NewVideoServiceDouyinPublishActionArgs()
}

func newVideoServiceDouyinPublishActionResult() interface{} {
	return video.NewVideoServiceDouyinPublishActionResult()
}

func douyinPublishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceDouyinPublishListArgs)
	realResult := result.(*video.VideoServiceDouyinPublishListResult)
	success, err := handler.(video.VideoService).DouyinPublishList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceDouyinPublishListArgs() interface{} {
	return video.NewVideoServiceDouyinPublishListArgs()
}

func newVideoServiceDouyinPublishListResult() interface{} {
	return video.NewVideoServiceDouyinPublishListResult()
}

func douyinFavoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceDouyinFavoriteListArgs)
	realResult := result.(*video.VideoServiceDouyinFavoriteListResult)
	success, err := handler.(video.VideoService).DouyinFavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceDouyinFavoriteListArgs() interface{} {
	return video.NewVideoServiceDouyinFavoriteListArgs()
}

func newVideoServiceDouyinFavoriteListResult() interface{} {
	return video.NewVideoServiceDouyinFavoriteListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) DouyinFeed(ctx context.Context, req *video.DouyinFeedRequest) (r *video.DouyinFeedResponse, err error) {
	var _args video.VideoServiceDouyinFeedArgs
	_args.Req = req
	var _result video.VideoServiceDouyinFeedResult
	if err = p.c.Call(ctx, "DouyinFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DouyinPublishAction(ctx context.Context, req *video.DouyinPublishActionRequest) (r *video.DouyinPublishActionResponse, err error) {
	var _args video.VideoServiceDouyinPublishActionArgs
	_args.Req = req
	var _result video.VideoServiceDouyinPublishActionResult
	if err = p.c.Call(ctx, "DouyinPublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DouyinPublishList(ctx context.Context, req *video.DouyinPublishListRequest) (r *video.DouyinPublishListResponse, err error) {
	var _args video.VideoServiceDouyinPublishListArgs
	_args.Req = req
	var _result video.VideoServiceDouyinPublishListResult
	if err = p.c.Call(ctx, "DouyinPublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DouyinFavoriteList(ctx context.Context, req *video.DouyinFavoriteListRequest) (r *video.DouyinFavoriteListResponse, err error) {
	var _args video.VideoServiceDouyinFavoriteListArgs
	_args.Req = req
	var _result video.VideoServiceDouyinFavoriteListResult
	if err = p.c.Call(ctx, "DouyinFavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
