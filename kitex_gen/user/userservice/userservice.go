// Code generated by Kitex v0.3.1. DO NOT EDIT.

package userservice

import (
	"context"
	"github.com/YuleZhang/douyin/kitex_gen/user"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"DouyinUserRegister": kitex.NewMethodInfo(douyinUserRegisterHandler, newUserServiceDouyinUserRegisterArgs, newUserServiceDouyinUserRegisterResult, false),
		"DouyinUser":         kitex.NewMethodInfo(douyinUserHandler, newUserServiceDouyinUserArgs, newUserServiceDouyinUserResult, false),
		"DouyinUserLogin":    kitex.NewMethodInfo(douyinUserLoginHandler, newUserServiceDouyinUserLoginArgs, newUserServiceDouyinUserLoginResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func douyinUserRegisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceDouyinUserRegisterArgs)
	realResult := result.(*user.UserServiceDouyinUserRegisterResult)
	success, err := handler.(user.UserService).DouyinUserRegister(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceDouyinUserRegisterArgs() interface{} {
	return user.NewUserServiceDouyinUserRegisterArgs()
}

func newUserServiceDouyinUserRegisterResult() interface{} {
	return user.NewUserServiceDouyinUserRegisterResult()
}

func douyinUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceDouyinUserArgs)
	realResult := result.(*user.UserServiceDouyinUserResult)
	success, err := handler.(user.UserService).DouyinUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceDouyinUserArgs() interface{} {
	return user.NewUserServiceDouyinUserArgs()
}

func newUserServiceDouyinUserResult() interface{} {
	return user.NewUserServiceDouyinUserResult()
}

func douyinUserLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceDouyinUserLoginArgs)
	realResult := result.(*user.UserServiceDouyinUserLoginResult)
	success, err := handler.(user.UserService).DouyinUserLogin(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceDouyinUserLoginArgs() interface{} {
	return user.NewUserServiceDouyinUserLoginArgs()
}

func newUserServiceDouyinUserLoginResult() interface{} {
	return user.NewUserServiceDouyinUserLoginResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) DouyinUserRegister(ctx context.Context, req *user.DouyinUserRegisterRequest) (r *user.DouyinUserRegisterResponse, err error) {
	var _args user.UserServiceDouyinUserRegisterArgs
	_args.Req = req
	var _result user.UserServiceDouyinUserRegisterResult
	if err = p.c.Call(ctx, "DouyinUserRegister", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DouyinUser(ctx context.Context, req *user.DouyinUserRequest) (r *user.DouyinUserResponse, err error) {
	var _args user.UserServiceDouyinUserArgs
	_args.Req = req
	var _result user.UserServiceDouyinUserResult
	if err = p.c.Call(ctx, "DouyinUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DouyinUserLogin(ctx context.Context, req *user.DouyinUserLoginRequest) (r *user.DouyinUserLoginResponse, err error) {
	var _args user.UserServiceDouyinUserLoginArgs
	_args.Req = req
	var _result user.UserServiceDouyinUserLoginResult
	if err = p.c.Call(ctx, "DouyinUserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
